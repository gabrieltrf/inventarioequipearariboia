import { collection, doc, setDoc, getDoc, getDocs } from "firebase/firestore";
import { db } from "../lib/firebase";
import { ItemStatus } from "@/types";
import { serverTimestamp } from "firebase/firestore";

// Cole√ß√µes que precisamos inicializar
const COLLECTIONS = {
  LOCATIONS: "locations",
  ITEMS: "items",
  MOVEMENTS: "movements",
  LOANS: "loans",
  CATEGORIES: "categories"
};

// Dados iniciais para cada cole√ß√£o
const initialData = {
  // Categorias iniciais
  categories: [
    { id: "cat1", name: "El√©trica" },
    { id: "cat2", name: "Mec√¢nica" },
    { id: "cat3", name: "Ferramentas" },
    { id: "cat4", name: "EPIs" },
    { id: "cat5", name: "Eletr√¥nica" }
  ],
  
  // Uma localiza√ß√£o de exemplo
  locations: [
    { 
      id: "loc1",
      name: "Almoxarifado Principal",
      description: "Almoxarifado principal da equipe",
      capacity: 100,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    }
  ],
  
  // Um item de exemplo
  items: [
    {
      id: "item1",
      name: "Chave de Fenda Phillips",
      description: "Chave de fenda com ponta phillips, tamanho m√©dio",
      category: { id: "cat3", name: "Ferramentas" },
      quantity: 5,
      minQuantity: 2,
      unit: "unidade",
      locationId: "loc1",
      status: ItemStatus.AVAILABLE,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    }
  ]
};

/**
 * Verifica se uma cole√ß√£o j√° existe no Firestore
 */
async function collectionExists(collectionName: string): Promise<boolean> {
  const collectionRef = collection(db, collectionName);
  const snapshot = await getDocs(collectionRef);
  return !snapshot.empty;
}

/**
 * Inicializa uma cole√ß√£o com um documento inicial se ela n√£o existir
 */
async function initializeCollection(collectionName: string, initialItems: any[]): Promise<void> {
  try {
    const exists = await collectionExists(collectionName);
    
    if (exists) {
      console.log(`‚úì Cole√ß√£o '${collectionName}' j√° existe.`);
      return;
    }
    
    // Cria documentos iniciais
    for (const item of initialItems) {
      const { id, ...data } = item;
      const docRef = doc(db, collectionName, id);
      await setDoc(docRef, data);
    }
    
    console.log(`‚úì Cole√ß√£o '${collectionName}' inicializada com sucesso!`);
  } catch (error) {
    console.error(`‚úó Erro ao inicializar cole√ß√£o '${collectionName}':`, error);
  }
}

/**
 * Fun√ß√£o principal para inicializar todas as cole√ß√µes
 */
export async function initializeFirestore(): Promise<void> {
  console.log("üî• Iniciando configura√ß√£o do Firestore...");
  
  try {
    // Inicializa as cole√ß√µes uma por uma
    await initializeCollection(COLLECTIONS.CATEGORIES, initialData.categories);
    await initializeCollection(COLLECTIONS.LOCATIONS, initialData.locations);
    await initializeCollection(COLLECTIONS.ITEMS, initialData.items);
    
    // Estas cole√ß√µes podem come√ßar vazias, apenas criamos o primeiro documento e depois o exclu√≠mos
    // Apenas para garantir que a cole√ß√£o exista
    if (!await collectionExists(COLLECTIONS.MOVEMENTS)) {
      console.log(`‚úì Criando cole√ß√£o vazia '${COLLECTIONS.MOVEMENTS}'`);
      await setDoc(doc(db, COLLECTIONS.MOVEMENTS, "placeholder"), {
        note: "Documento tempor√°rio para criar a cole√ß√£o",
        createdAt: serverTimestamp()
      });
    }
    
    if (!await collectionExists(COLLECTIONS.LOANS)) {
      console.log(`‚úì Criando cole√ß√£o vazia '${COLLECTIONS.LOANS}'`);
      await setDoc(doc(db, COLLECTIONS.LOANS, "placeholder"), {
        note: "Documento tempor√°rio para criar a cole√ß√£o",
        createdAt: serverTimestamp()
      });
    }
    
    console.log("‚úÖ Configura√ß√£o do Firestore conclu√≠da com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro durante a inicializa√ß√£o do Firestore:", error);
  }
}
